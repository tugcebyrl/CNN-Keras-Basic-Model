# -*- coding: utf-8 -*-
"""CNN-GoruntuIsleme.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Yg6juz5pu5mWRRMiyQK9heds48exkcZe
"""

# Kütüphanelerin yüklenmesi
import tensorflow as tf
from tensorflow.keras import datasets,layers,models
import matplotlib.pyplot as plt

tf.__version__

# Veri kümesini yükleme
(x_train,y_train),(x_test,y_test)=datasets.cifar10.load_data()

# Verileri normalize etme (0-255 aralığından 0-1 aralığına)
x_train,x_test=x_train/255,x_test/255

# Eğitim veri setinden birkaç örnek görüntü ve etiket

class_names=["Uçak","Araba","Kuş","Kedi","Geyik","Köpek","Kurbağa","At","Gemi","Kamyon"]

plt.figure(figsize=(10,10))
for i in range(9):
  plt.subplot(3,3,i+1)
  plt.xticks([])
  plt.yticks([])
  plt.grid(False)
  plt.imshow(x_train[i],cmap=plt.cm.binary)
  plt.xlabel(class_names[y_train[i][0]])
plt.show()

# Basit bir CNN Modeli

model=models.Sequential([
    # İlk konvolüsyon katmanı

    # Giriş görüntüsünden özellik haritaları(feature map) çıkarmak
    # Çıkış filtre sayısı:32 Kernel boyutu:3x3 boyutunda matris
    # input shape: 32x32 piksel boyutunda 3 renk kanallı(RGB)
    layers.Conv2D(32,(3,3),activation="relu",input_shape=(32,32,3)),

    # Özellik haritasının boyutunu küçültmek ve önemli bilgileri yoğunlaştırmak
    # 2x2 boyutundaki bölgedeki maksimum değeri seçer
    # çıktı (16,16,32) boyutunda bir özellik haritası
    layers.MaxPooling2D((2,2)),

    # İkinci konvolüsyon katmanı
    layers.Conv2D(64,(3,3),activation="relu"),
    layers.MaxPooling2D((2,2)),

    # Üçüncü konvolüsyon katmanı
    layers.Conv2D(64,(3,3),activation="relu"),

    # Tam bağlantılı (Fully Connected) katman
    # 3 boyutlu özellik haritasını 1 boyutlu vektöre dönüştürmek
    layers.Flatten(),
    # Yüksek seviyeli vektörleri öğrenmek (64 boyutunda bir vektör)
    layers.Dense(64,activation="relu"),
    # Sınıflandırma işlemi gerçekleşir.
    # 10 boyutlu bir vektör oluşur.
    # Her eleman, bir sınıfa ait olasılığı temsil eder.
    layers.Dense(10,activation="softmax") # 10 sınıf için çıkış katmanı
])

# Modeli derleme
model.compile(optimizer="adam", # Öğrenme oranını otomatik olarak ayarlar
              loss="sparse_categorical_crossentropy", # Model tahminlerinin doğru etiketlere ne kadar uzak olduğunu ölçme
              metrics=['accuracy']) # modelin performansını ölçme

# Modeli eğitme
# epochs: Eğitim sırasında veri setinin kaç kez gözden geçireceğini belirler.
# validation_data: Modelin performansı bağımsız bir veri setinde değerlendirilir.
model_history=model.fit(x_train,y_train,epochs=10,validation_data=(x_test,y_test))

# Performans değerlendirme
# verbose=0 ise ekrana çıktı vermez
# verbose=1 ise ekrana ayrıntılı bir çıktı verir.
# verbose=2 ise ekrana sade bir çıktı verir.
test_loss,test_acc=model.evaluate(x_test,y_test,verbose=2)
print(f"Test kaybı: {test_loss}")
print(f"Test doğruluğu: {test_acc}")

# Model performansı görselleştirme

plt.plot(model_history.history['accuracy'],label="Eğitim Doğruluğu")
plt.plot(model_history.history['val_accuracy'],label="Doğrulama Doğruluğu")
plt.xlabel("Epoch")
plt.ylabel("Doğruluk")
plt.legend(loc="lower right")
plt.title("Eğitim ve Doğrulama Doğruluğu")
plt.show()